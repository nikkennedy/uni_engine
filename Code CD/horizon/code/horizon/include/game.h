/*	--------------------------------------------------------------------------------- 
	Filename      - game.h 
	Last Modified - 20/04/03
	Author        - Nicholas Kennedy
	Project       - Horizon (3rd Year BSC Computer Science Project "Interactive Game 
			        system with Intelligence")
	Description   - Definition of CGame
	--------------------------------------------------------------------------------- */

#ifndef _GAME_H_
#define _GAME_H_

#include <types.h>
#include <maths.h>
#include <debug.h>
#include <lbsp.h>
#include <image.h>
#include <dxstuff.h>
#include <object.h>
#include <hrz_config.h>
#include <bullet.h>
#include <waypoint.h>
#include <player.h>
#include <collectable.h>
#include <rend.h>
#include <sprite.h>
#include <ai.h>
#include <render.h>

// --------------------------------------------------------------------------------- 
// each ammo box collect gives the player 10 rockets
// --------------------------------------------------------------------------------- 
#define GAME_BOX_AMMO_SIZE          10

// --------------------------------------------------------------------------------- 
// the maximum amount of ammo a player can hold
// --------------------------------------------------------------------------------- 
#define GAME_MAX_AMMO				50

// --------------------------------------------------------------------------------- 
// CGame
// --------------------------------------------------------------------------------- 
class CGame {

// --------------------------------------------------------------------------------- 
// rendering and A.I. units
// --------------------------------------------------------------------------------- 
public:
	CGameAI *c_ai_manager;
	CRenderer *c_rend;

private:

	// --------------------------------------------------------------------------------- 
	// icons
	// --------------------------------------------------------------------------------- 
	CSprite *health[4];
	CSprite *ammo[10];
	
	// --------------------------------------------------------------------------------- 
	// used to hold waypoints when they are loaded
	// --------------------------------------------------------------------------------- 
	CWayPointVector loaded_waypoints;
	CWayPointChainVector loaded_wpc;

	// --------------------------------------------------------------------------------- 
	// the collectables in the current level
	// --------------------------------------------------------------------------------- 
	CCollectableVector collectables;

	// --------------------------------------------------------------------------------- 
	// the objects the player can hit (i.e. bots)
	// --------------------------------------------------------------------------------- 
	CObjectVector objectlist;

	// --------------------------------------------------------------------------------- 
	// number of orbs to collect to complete loaded level
	// --------------------------------------------------------------------------------- 
	int total_orbs_to_collect;

	// --------------------------------------------------------------------------------- 
	// 1 = update everything, 0 = only rendering unit
	// --------------------------------------------------------------------------------- 
	int game_running;

	// --------------------------------------------------------------------------------- 
	// has the level been completed?
	// --------------------------------------------------------------------------------- 
	int level_complete;

	// --------------------------------------------------------------------------------- 
	// has the "START" command been issued
	// --------------------------------------------------------------------------------- 
	int game_started; 

	// --------------------------------------------------------------------------------- 
	// the player object
	// --------------------------------------------------------------------------------- 
	CPlayer *player_one;

	// --------------------------------------------------------------------------------- 
	// the current loaded BSP tree
	// --------------------------------------------------------------------------------- 
	CLBSP *bsp;
	char cur_bsp_filename[255];

	// --------------------------------------------------------------------------------- 
	// DirectInput
	// --------------------------------------------------------------------------------- 
	CDirectX *dx_stuff;

	// --------------------------------------------------------------------------------- 
	// current level loaded index into CHrzConfig::levels
	// --------------------------------------------------------------------------------- 
	int which_level_index;

	// --------------------------------------------------------------------------------- 
	// state variables
	// --------------------------------------------------------------------------------- 
	int console_active;
	int level_load_complete;
	int loaded_lightmaps;

public:
	// --------------------------------------------------------------------------------- 
	// constructor
	// --------------------------------------------------------------------------------- 
	CGame();

	// --------------------------------------------------------------------------------- 
	// initialisation
	// --------------------------------------------------------------------------------- 
	void initialize();
	int start(void);

	// --------------------------------------------------------------------------------- 
	// called once per frame from CWin class to update game state
	// --------------------------------------------------------------------------------- 
	int update(void); 

	// --------------------------------------------------------------------------------- 
	// load a level definition file
	// --------------------------------------------------------------------------------- 
	void load_level_def(char *filename);
	int parse_def_file(char *str);
	
	// --------------------------------------------------------------------------------- 
	// send a message to the rendering unit
	// --------------------------------------------------------------------------------- 
	void rend_send_msg(int dest, char *msg, char *desc);

	// --------------------------------------------------------------------------------- 
	// setup dx_stuff pointer
	// --------------------------------------------------------------------------------- 
	void set_dxstuff(CDirectX *dx) { dx_stuff = dx; }
	
	// --------------------------------------------------------------------------------- 
	// input processing
	// --------------------------------------------------------------------------------- 
	int process_input(void);
	int process_mouse(void);

	// --------------------------------------------------------------------------------- 
	// drop down console command processing
	// --------------------------------------------------------------------------------- 
	int process_options(char *msg);

	// --------------------------------------------------------------------------------- 
	// has player picked up any collectables?
	// --------------------------------------------------------------------------------- 
	int process_collectables();

	// --------------------------------------------------------------------------------- 
	// apply gravity to the player object
	// --------------------------------------------------------------------------------- 
	void do_gravity(void);

	// --------------------------------------------------------------------------------- 
	// launch a new rocket if available and control rockets already launched
	// --------------------------------------------------------------------------------- 
	void move_bullets();
	void fire_gun();

	// --------------------------------------------------------------------------------- 
	// debug function
	// --------------------------------------------------------------------------------- 
	void calculate_frame_rate();

	// --------------------------------------------------------------------------------- 
	// renderer and A.I. callback handlers
	// --------------------------------------------------------------------------------- 
	int rend_callback(int coz);
	int ai_callback(int coz);
};


#endif


// END OF FILE ----------------------------------------------------------